"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[491],{47796:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new Enumerator\\n\\n\\n```lua\\n-- The type definition ensures that only these keys and values are allowed.\\ntype FruitEnum = {\\n    Apple: number,\\n    Banana: number,\\n    Cherry: number,\\n}\\n\\n-- Create an Enumerator instance for the `FruitEnum` type\\nlocal Fruits: Enumerator.Enum<FruitEnum> = Enumerator.new(\\"Fruits\\", {\\n    Apple = 1,\\n    Banana = 2,\\n    Cherry = 3,\\n})\\n```","params":[{"name":"type","desc":"The name of the enum type.","lua_type":"string"},{"name":"values","desc":"A table mapping names to values for the enum items.","lua_type":"CustomEnum & { [string]: number }"}],"returns":[{"desc":"The newly created enumerator.","lua_type":"Enumerator<CustomEnum>"}],"function_type":"static","source":{"line":84,"path":"src/init.luau"}},{"name":"GetItems","desc":"Retrieves all enum items as a table.\\n\\n\\n```lua\\nlocal allItems: { Enumerator.Item<FruitEnum> } = Fruits:GetItems()\\nfor _, item in allItems do\\n    print(item.Name, item.Value) -- Apple 1, Banana 2, Cherry 3\\nend\\n```","params":[],"returns":[{"desc":"A table of all Item instances in the enum.","lua_type":"{ Item<CustomEnum> }?"}],"function_type":"method","source":{"line":103,"path":"src/init.luau"}},{"name":"GetItemByName","desc":"Retrieves an enum item by its name.\\n\\n\\n```lua\\nlocal bananaItem: Enumerator.Item<FruitEnum>? = Fruits:GetItemByValue(2)\\nif bananaItem then\\n    print(bananaItem.Name) -- Banana\\nend\\n```","params":[{"name":"name","desc":"The name of the enum item to retrieve.","lua_type":"string"}],"returns":[{"desc":"The enum item with the specified name, or nil if not found.","lua_type":"Item<CustomEnum>?"}],"function_type":"method","source":{"line":130,"path":"src/init.luau"}},{"name":"GetItemByValue","desc":"Retrieves an enum item by its value.\\n\\n\\n```lua\\nlocal cherryItem: Enumerator.Item<FruitEnum> = Fruits:GetItemByName(\\"Cherry\\")\\nprint(cherryItem.Value) -- 3\\n```","params":[{"name":"value","desc":"The value of the enum item to retrieve.","lua_type":"number"}],"returns":[{"desc":"The enum item with the specified value, or nil if not found.","lua_type":"Item<CustomEnum>?"}],"function_type":"method","source":{"line":150,"path":"src/init.luau"}}],"properties":[],"types":[{"name":"Item<CustomEnum>","desc":"","lua_type":"{ {EnumType: CustomEnum, Name: string, Value: number} }","source":{"line":17,"path":"src/init.luau"}}],"name":"Enumerator","desc":"Enumerator is a flexible and efficient module designed for managing enumerations in Luau projects.\\n\\n\\n[Example Usage](https://github.com/Paficent/Enumerator/blob/main/test/strict.luau)","source":{"line":12,"path":"src/init.luau"}}')}}]);